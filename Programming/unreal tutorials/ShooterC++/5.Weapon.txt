The Item Class:
Item c++ class 생성.
LineTrace를 통해 Widget Popup event를 실행하기 위해 CollisionComponent추가.
  private variable를 위한 private section과 getter setter를 위한 public section을 따로 두자.
USkeletalMeshComponent 추가.
UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = "Item Properties", meta = (AllowPrivateAccess = true))
	USkeletalMeshComponent* ItemMesh;

	UPROPERTY(EditAnywhere, BlueprintReadOnly, Category= "Item Properties", meta=(AllowPrivateAccess = true))
	class UBoxComponent* CollisionBox;

ItemMesh = CreateDefaultSubobject<USkeletalMeshComponent>(TEXT("ItemMesh"));
	SetRootComponent(ItemMesh);

	CollisionBox = CreateDefaultSubobject<UBoxComponent>(TEXT("CollisionBox"));
	CollisionBox->SetupAttachment(ItemMesh);
}

The Weapon Class:
위에 생성한 item class를 기반으로 weapon class 생성.
Game에 Weapon -> BaseWeapon 폴더 생성.
생성한 Weapon Class에 기반하여 Weapon Blueprint 생성.
skeletal mesh 설정.

UMG Intro Lesson:
UMG: Unreal Motion Graphics. This is used to create a widget blueprint.
    UMG - Canvas Panel: Allows widgets to be laid out arbitrarily. Can be anchored, which mean distance is measured from the anchor.
    UMG - Overlay: Allows UI elements to stack
    UMG - Horizontal/Vertical Box: Arrange items in an widget. Add items vertically/horizontally
             You can place boxes inside boxes
    UMG - Images/Text
    UMG - Hierarchy: Attach items to other items. Like components in Actors. Scale a parent, the children scale with it. Drag and drop to rearrange.

PickupWidget Blueprint:
 UWidgetComponent* PickupWidget변수 추가.
 UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = "Item Properties", meta = (AllowPrivateAccess = true))
	class UWidgetComponent* PickupWidget;
 UMG(Unreal Motion Graphics) modules: Contains all sort of codes used for unreal engine UMG, which is used to make Widget and HUD elements.
 Shooter.Build.cs - PublicDependencyModuleNames에 UMG 모듈 추가.
 PublicDependencyModuleNames.AddRange(new string[] { "Core", "CoreUObject", "Engine", "InputCore", "UMG" });
 HUD 폴더에 Widget Blueprint 추가.
 오른쪽 상단의 FillScreen 옵션을 Custom으로 조정하면 크기 조절가능
 details의 Horizontal Alignment, Vertical Alignment를 Fill로 하면 Parent를 가득 채운다.
 slot의 Size에서 fill을 선택하면 가질 수 있는 만큼의 공간을 차지한다.
 Render Transform에서 Transform을 조절할 수 있다.
 Text의 Font에서 outline size에 값을 주면 outline을 가진다.
 Centering이 안되면 size가 fill인지 확인.
 Font:
     Freefont를 다운로드 후 만든 폴더 안에 import

Add Widget to Weapon:
 UWidgetComponent* PickupWidget 초기화.
 Weapon Blueprint의 Space에서 World/Screen 옵션 설정(Screen) 및 Widget class, Draw Size 설정.

Trace for Widget:
 WidgetComponent의 Transform을 조절하여 위치를 옮길 수 있다.
 BeginPlay에서 Visibility를 false로 Set;
 Crosshair에서의 linetrace 결과를 반환하는 함수 정의 및 구현.
 Tick에서 HitResult 변수를 생성하고 함수 호출.
 HitResult의 hit가 true이면 AItem변수를 생성하고 hitactor를 AItem으로 cast.
 PickUpWidget의 Getter 정의 및 구현
 getter를 통해 setvisibility
 FHitResult ItemHitResult;
	TraceUnderCrosshairs(ItemHitResult);
	if (ItemHitResult.bBlockingHit)
	{
		AItem* HitItem = Cast<AItem>(ItemHitResult.Actor);
		
		if (HitItem && HitItem->GetPickupWidget())
		{
			HitItem->GetPickupWidget()->SetVisibility(true);
		}
	}

 CollisionBox가 linetrace에 맞게 반응하도록 조정.
 CollisionBox->SetCollisionResponseToAllChannels(ECollisionResponse::ECR_Ignore);
	CollisionBox->SetCollisionResponseToChannel(
		ECollisionChannel::ECC_Visibility,
		ECollisionResponse::ECR_Block);

Widget Trace When Close:

-아이템이 가까울 때만 위젯이 pop up될 수 있도록 아이템 헤더 파일에 sphere collision component 추가.

-sphere component에는 OnComponentBeginOverlap structure가 있다.

-OnComponentBeginOverlap의 AddDynamic() 함수를 통해 함수 포인터를 받고 overlap마다 callback function을 호출하도록 할 수 있다.

-callback function은 OnComponentBeginOverlap가 보내는 overlap에 관한 정보를 받아야 하기 때문에 특정 signature를 가져야 한다.
 void OnSphereOverlap(
		UPrimitiveComponent* OverlappedComponent,
		AActor* OtherActor,
		UPrimitiveComponent* OtherComp,
		int32 OtherBodyIndex,
		bool bFromSweep,
		const FHitResult& SweepResult);

-OnComponentEndOverlap도 OnComponentBeginOverlap과 같은 절차를 거친다. 그러나 callback function의 signature가 조금 다르다.
 void OnSphereEndOverlap(
		UPrimitiveComponent* OverlappedComponent,
		AActor* OtherActor,
		UPrimitiveComponent* OtherComponent,
		int32 OtherBodyIndex);

-OnSphereOverlap과 OnSphereEndOverlap는 반드시 UFUNCTION()이어야 한다.

-OnSphereOverlap과 OnSphereEndOverlap에서 다른 필요한 함수들을 포함해 주는 식으로 사용한다.

-아이템 추적을 위해선 Character에서 아이템 추적을 위한 bool 변수와 overlapped된 아이템의 개수를 위한 변수가 있어야 한다. ex)bShouldTraceForItems. OverlappedItemCount

-OverlappedItemCount가 private이기에 값을 수정할 수 있는 public function이 따로 있어야 한다.

-OnSphereOverlap과 OnSphereEndOverlap에서 overlap이 발생하고 있는지 otheractor를 nullcheck하고 overlapped object가 찾는 object인지 확인하기 위해 cast를 호출한다.
 그 후 원하는 함수 호출.

-코드가 난잡해지지 않도록 함수를 통해 관리한다.

Hide Widget:

-TraceLastHitItemFrame AItem* 변수를 추가하여 HitItem의 다양한 상태를 변경할 수 있도록 한다.

-Code 6와 관련된 에러는 UPROPERTY나 UFUNCTION같은 매크로에서 기인했을 가능성이 높다.

Bind Item Name:

-Widget Blueprint의 text -> content -> bind -> create binding

-Item Reference를 위한 변수 생성.

-무기에서 WidgetComponent -> GetUserWidgetObject -> cast to -> set Item Reference to self

-binding function에서 Item reference - is valid - get itemname으로 return

Bind Item Count:

-Itemcount 변수 추가 -> Name과 같은 과정으로 bind.

Bind Star Opacity:

-rarity 표현을 위한 enum class 추가.
UENUM(BlueprintType)
enum class EItemRarity : uint8
{
	EIR_Damaged UMETA(DisplayName = "Damaged"),
	EIR_Common UMETA(DisplayName = "Common"),
	EIR_Uncommon UMETA(DisplayName = "Uncommon"),
	EIR_Rare UMETA(DisplayName = "Rare"),
	EIR_Legendary UMETA(DisplayName = "Legendary"),

	EIR_Max UMETA(DisplayName = "DefaultMax")
};

-UENUM(BlueprintType) allows us to create a blueprint based on the enum type if we want to.

-UMETA(DisplayName = "Damaged") -> display name will be 'Damaged' rather than EIR_Damaged

-위와 같이 정의하고 나면 enum class의 변수를 만들 수 있다.

-active stars를 표현하기 위한 bool array 변수 추가.
 UPROPERTY(VisibleAnywere, BlueprintReadOnly, Category = ItemProperties, meta = (AllowPrivateAccess = "true"))
 TArray<bool> ActiveStars;

-ActiveStars array의 elements를 레어도에 맞게 set하는 함수 추가.

-Widget blueprint -> start image color and opacity bind 함수 구현. bool array에서 인덱스에 맞게 값을 가져와서 opacity set.

Spawn Default Weapon:

-character에 equipped item을 위한 변수 추가.

-To spawn something, we need a UCLASS, which is a variable that holds a reference to a blueprint.

-If we want a UCLASS that we can set in a dropdown in the blueprints, we can use TSubclassof

-Default Weapon 정보를 위해:
UPROPERTY(EditDefaultsOnly, BlueprintReadOnly, Category = Combat, meta = (AllowPrivateAccess = "true"))
TSubclassOf<AWeapon> DefaultWeaponClass;

-default weapon을 spawn, equip하는 함수 추가.

-무기 장착을 위해 skeletal mesh에 socket 추가.

-socket을 이용하여 생성한 함수 구현.
 spawnactor -> get mesh socket-> attach actor -> set equippedweapon

Equip Function:

Equip function 추가 및 구현

-get mesh socket-> attach actor -> set equippedweapon

-item의 sphere component와 collision box의 collision을 제거해주기 위해 이에 대한 getter 선언.

-Equip function에서 collision제거.
 WeaponToEquip->GetAreaSphere()->SetCollisionResponseToAllChannels(ECollisionResponse::ECR_Ignore);

-함수의 기능을 명확하게 분리하기 위해 default weapon을 spawn, equip하는 함수의 역할을 spawn으로만 제한하기 위해 
 default weapon의 pointer만을 return 하게 하고 beginplay에서 equipfunction을 반환된 default weapon의 주소를 통해 호출한다.

Item State Lesson:

Equipped: -Held in hand
             -Attached to Socket
             -Collision Turned off
             -EquippedWeapon variable holds a reference to it

Pickup: -Sitting on the ground
          -AreaSphere and Collision Box are active
          -Not attached to anything

EquipInterping: -We are picking up the Item
                    -It flies up to our face
                    -Collision should be off

Pickedup: -We are holding the item, but it's not equipped
             -Sitting in the inventory
             -Collsion, visibility should be off

Falling: -We are dropping the item
          -Hasn't yet hit the ground
          -Should block the floor
          -Area sphere and collision box

Item State:

-item state의 enum정의

-item state enum class의 변수 추가

-item state를 변경하는 곳에서 item state 변수 값 수정(getter와 setter 정의 필수).

Set Item Properties:

-item의 proerties를 item state에 따라 set하는 함수 생성 및 구현(SetItemPropeties).

-SetItemPropeties에서 sphere component, box component, mesh의 collision 들을 설정하고 SetItemStates에서 SetItemPropeties를 호출하도록 수정.

Detach Weapon:

-DropWeapon 함수 정의.

-ItemMesh를 위한 getter 생성.

-ItemMesh에서 DetachFromComponent함수 호출 가능
if (EquippedWeapon)
	{
		FDetachmentTransformRules DetachmentTransformRules(EDetachmentRule::KeepWorld, true);
		EquippedWeapon->GetItemMesh()->DetachFromComponent(DetachmentTransformRules);
	}

-Select action mapping set

-Select action mapping을 위한 SelectButtonPressed와  SelectButtonReleased 정의 및 binding.

Item Falling State:

-gun의 physics asset에서 physic조정.

-SetItemProperties 함수에서 Falling case에 대한 수정 정의.
 -SetEnableGravity(true);를 호출해 주어야 한다.

Throw Weapon:

-Weapon class에서 public, protected, private section 추가

-생성자, ThrowWeapon, StopFalling 함수, FTimerHandle 변수, ThrowWeaponTime 변수, bFalling 변수 추가.

-ThrowWeapon정의:
 //Use FMath::FRandRange to randomize random rotation.

void AWeapon::ThrowWeapon()
{
	FRotator MeshRotation{ 0.f, GetItemMesh()->GetComponentRotation().Yaw, 0.f };
	GetItemMesh()->SetWorldRotation(MeshRotation, false, nullptr, ETeleportType::TeleportPhysics);

	const FVector MeshForward{ GetItemMesh()->GetForwardVector() };
	FVector MeshRight{ GetItemMesh()->GetRightVector() };
	FVector ImpulseDirection = MeshRight.RotateAngleAxis(-20.f, MeshForward);

	float RandomRotation{ -30.0f };
	MeshRight = MeshRight.RotateAngleAxis(RandomRotation, FVector(0.f, 0.f, 1.0f));
	MeshRight *= 200'000.f;
	GetItemMesh()->AddImpulse(MeshRight);

	bFalling = true;
	GetWorldTimerManager().SetTimer(ThrowWeaponTimer, this, &AWeapon::StopFalling, ThrowWeaponTime);
}

void AWeapon::StopFalling()
{
	bFalling = false;
	SetItemState(EItemState::EIS_Pickup);
}

-To keep the item upright:
 tick을 재정의.

void AWeapon::Tick(float DeltaTime)
{
	if (GetItemState() == EItemState::EIS_Falling && bFalling)
	{
		const FRotator MeshRotation{ 0.f, GetItemMesh()->GetComponentRotation().Yaw, 0.f };
		GetItemMesh()->SetWorldRotation(MeshRotation, false, nullptr, ETeleportType::TeleportPhysics);
	}
}

-PrimaryActorTick.bCanEverTick = true;를 생성자에 추가해 주지 않으면 tick은 작동하지 않는다.

Swap Weapon:
-trace되고 있는 item을 추적하는 멤버 변수 추가.

-SwapWeapon 함수 추가.
void AShooterCharacter::SwapWeapon(AWeapon* WeaponToSwap)
{
	DropWeapon();
	EquipWeapon(WeaponToSwap);
}

-상호작용 버튼 키 이벤트 수정
 void AShooterCharacter::SelectButtonPressed()
{
	if (TraceHitItem)
	{
		auto TraceHitWeapon = Cast<AWeapon>(TraceHitItem);
		SwapWeapon(TraceHitWeapon);
	}
}