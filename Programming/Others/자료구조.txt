-슬롯이란 '테이블을 이루는, 데이터를 저장할 수 있는 각각의 공간'을 의미한다.

-슬롯의 상태:
 Empty: 이 슬롯에는 데이터가 저장된바 없다.
 Deleted: 데이터가 저장된바 있으나 현재는 비워진 상태다.
 Inuse: 현재 유효한 데이터가 저장되어 있다.

-좋은 해쉬 함수는 '충돌을 덜 일으키는 해쉬 함수'라고도 말할 수 있다.

-테이블의 메모리 상황이 응집하여 있다면 좋은 해쉬 함수를 사용했다고 할 수 없다. 밀도가 높을수록 충돌이 일어날
 확률이 높기 때문이다.

-좋은 해쉬 함수 디자인을 위한 해답은 없으나 좋은 해쉬 함수는 키의 일부분을 참조하여 해쉬 값을 만들지 않고, 키 전체를 참조하여 해쉬값을 만들어 낸다.

-좋은 해쉬 함수 디자인 방법은 키의 특성에 따라 달라진다.

-여러가지 방법:
 자릿수 선택(Digit) ex) 여덟 자리의 수로 이뤄진 키에서 다양한 해쉬 값 생성에 도움을 주는 네 자리의 수를 뽑아서 해쉬 값을 생성한다.
 키의 특정 위치에서 중복의 비율이 높거나, 아예 공통으로 들어가는 값이 있다면, 이를 제외한 나머지를 가지고 해쉬 값을 생성해야 한다.

 비트 추출 방법: 탐색 키의 비트 열에서 일부를 추출 및 조합

 자릿수 폴딩(Digit Folding): 종이를 접듯이 숫자를 겹치게 하여 더한 결과를 해쉬 값으로 결정하는 방법

-해쉬 함수를 디자인 할 때에는 다양한 방법들보다 키의 특성과 저장공간의 크기를 고려하는 것이 우선이다.

	13-2 충돌(Collision) 문제의 해결책

-충돌이 발생하면, 충돌이 발생한 그 자리를 대신해서 빈 자리를 찾아야 한다. 다만 빈 자리를 찾는 방법에 따라서 해결책이 구분될 뿐이다.

-선형 조사법(Linear Probing): 충돌이 발생했을 때 그 옆자리가 비었는지 살펴보고, 비었을 경우 그 자리에 대신 저장하는 것.

-선형 조사법은 충돌의 횟수가 증가함에 따라서 '클러스터(cluster) 현상' 즉 특정 영역에 데이터가 집중적으로 몰리는 현상이 발생한다는 단점이 있다.
 그리고 이러한 클러스터 현상은 충돌의 확률을 높이는 직접적인 원인이 된다.

-선형 조사법은 충돌 발생시 n칸 옆의 슬롯을 검사한다면, 이차 조사법은 n^2칸 옆의 슬롯을 검사한다.

-탐색의 과정에서 Deleted 상태임을 확인한다면 충돌이 발생했음을 의심하여 선형 조사법에 근거한 탐색의 과정을 진행할 수 있다.

-선형, 이차 조사법과 같은 충돌의 해결책을 적용하기 위해서는 슬롯의 상태에 Deleted를 포함시켜야 한다.

-선형, 이차 조사법을 적용하였다면, 탐색의 과정에서도 이를 근거로 충돌을 의심하는 탐색의 과정을 포함시켜야 한다.

-이차 조사법의 문제점:
 해쉬 값이 같으면, 충돌 발생시 빈 슬롯을 찾기 위해서 접근하는 위치가 늘 동일하다.

-이중 해쉬 방법에서는 두 개의 함수를 마련한다. 하나는 키를 근거로 저장위치를 결정하기 위한 것이다(1차 해쉬 함수). 다른 하나는 충돌이 발생했을 때, 몇 칸 뒤에
 위치한 슬롯을 살펴볼지 그 거리를 결정하기 위한 것이다(2차 해쉬 함수).

-2차 해쉬 함수를 결정하는 일반적인 형태:
 h2(k) = 1 + (k % c)
 -1을 더하는 이유는 2차 해쉬 값이 0이 되는 것을 막기 위해서이다.
 -c는 해쉬 최대 값보다 작은 소수 중에서 선택하게 되는데 가급적 2차 해쉬의 값이 1차 해쉬 값을 넘어서지 않게 하기 위함이다. 소수로 결정하는 이유는 소수를
  선택했을 때 클러스터 현상의 발생 확률을 현저히 낮춘다는 통계를 근거로 한 것이다.

-앞서 소개한 유형의 방법들을 가리켜 '열린 어드레싱 방법(open addressing method)'이라 하는데, 이는 충돌이 발생하면 다른 자리에 대신 저장한다는 의미가
 담겨 있다.

-'닫힌 어드레싱 방법(close addressing method)'은 자신의 자리에 저장한다는 의미가 담겨 있다. 그렇게 하려면 자리를 여러 개 마련해야 하는데, 2차원 배열을
 활용한 방법과 연결 리스트를 활용한 방법이 있다. 

-배열을 이용하는 방법은 거론되지 않는다. 충돌이 발생하지 않을 경우 메모리 낭비가 심하고, 충돌의 최대 횟수를 결정해야 하는 부담되 있기 때문이다.

-슬롯을 생성하여 연결 리스트의 모델로 연결해나가는 방식으로 충돌 문제를 해결하는 것을 '체이닝(chaining)'방법이라 한다.

-체이닝은 동일한 해쉬 값으로 묶여있는 연결된 슬롯을 모두 조사해야 한다는 불편이 있으나, 충돌의 확률이 높지 않다면 연결된 슬롯의 길이는 부담스러운 정도가
 아니게 된다.

650 209 2967